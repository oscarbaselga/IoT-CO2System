[
    {
        "id": "b2ef1f643d602e3e",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3b39a04ff3a04176",
        "type": "tls-config",
        "name": "https_esp",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "http_cert.pem",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "83c9b80d0ea1f978",
        "type": "tls-config",
        "name": "mqtt_cert",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "mqtt_test_broker.pem",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "fb31e1faedc8c906",
        "type": "mqtt-broker",
        "name": "",
        "broker": "test.mosquitto.org",
        "port": "8883",
        "tls": "83c9b80d0ea1f978",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "e7c4cbc4ab1359cc",
        "type": "ui_group",
        "name": "CO2",
        "tab": "8b8671636e994963",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "97dbd6937c9ef01c",
        "type": "ui_group",
        "name": "BLE Devices",
        "tab": "8b8671636e994963",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8b8671636e994963",
        "type": "ui_tab",
        "name": "Co2 Detector",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "167b0bda58eff465",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "4b55a957cf8b27fc",
        "type": "http request",
        "z": "b2ef1f643d602e3e",
        "name": "GET system/info",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://192.168.1.45:443/system/info",
        "tls": "3b39a04ff3a04176",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 400,
        "y": 80,
        "wires": [
            [
                "92cf5c92be266138"
            ]
        ]
    },
    {
        "id": "ac199cfada4a5d39",
        "type": "inject",
        "z": "b2ef1f643d602e3e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "4b55a957cf8b27fc"
            ]
        ]
    },
    {
        "id": "92cf5c92be266138",
        "type": "debug",
        "z": "b2ef1f643d602e3e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 200,
        "wires": []
    },
    {
        "id": "081f08852a7ea626",
        "type": "http request",
        "z": "b2ef1f643d602e3e",
        "name": "GET node/info",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://192.168.1.45:443/node/info",
        "tls": "3b39a04ff3a04176",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 400,
        "y": 140,
        "wires": [
            [
                "92cf5c92be266138"
            ]
        ]
    },
    {
        "id": "32c0fa1c70e58733",
        "type": "inject",
        "z": "b2ef1f643d602e3e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "081f08852a7ea626"
            ]
        ]
    },
    {
        "id": "d309bce5dce9999f",
        "type": "http request",
        "z": "b2ef1f643d602e3e",
        "name": "POST node/esp_location",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://192.168.1.45:443/node/esp_location",
        "tls": "3b39a04ff3a04176",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 430,
        "y": 200,
        "wires": [
            [
                "92cf5c92be266138"
            ]
        ]
    },
    {
        "id": "b7cdae497a669669",
        "type": "inject",
        "z": "b2ef1f643d602e3e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "/INFORMATICA/1/7/",
        "payloadType": "str",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "d309bce5dce9999f"
            ]
        ]
    },
    {
        "id": "604b325683143115",
        "type": "http request",
        "z": "b2ef1f643d602e3e",
        "name": "POST node/esp_id",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://192.168.1.45:443/node/esp_id",
        "tls": "3b39a04ff3a04176",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 410,
        "y": 260,
        "wires": [
            [
                "92cf5c92be266138"
            ]
        ]
    },
    {
        "id": "8faea7f9a338832b",
        "type": "inject",
        "z": "b2ef1f643d602e3e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "str",
        "x": 130,
        "y": 260,
        "wires": [
            [
                "604b325683143115"
            ]
        ]
    },
    {
        "id": "6317740e568fb6cb",
        "type": "http request",
        "z": "b2ef1f643d602e3e",
        "name": "GET node/capture",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://192.168.1.45:443/node/capture",
        "tls": "3b39a04ff3a04176",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 410,
        "y": 320,
        "wires": [
            [
                "92cf5c92be266138"
            ]
        ]
    },
    {
        "id": "e20e92c3e131a597",
        "type": "inject",
        "z": "b2ef1f643d602e3e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "6317740e568fb6cb"
            ]
        ]
    },
    {
        "id": "655e832ab48705f4",
        "type": "mqtt in",
        "z": "b2ef1f643d602e3e",
        "name": "MQTT",
        "topic": "/INFORMATICA/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "fb31e1faedc8c906",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 460,
        "wires": [
            [
                "8cb4badf87293abf"
            ]
        ]
    },
    {
        "id": "8cb4badf87293abf",
        "type": "function",
        "z": "b2ef1f643d602e3e",
        "name": "to ArrayBuffer",
        "func": "let b = msg.payload;\nmsg.payload = b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 460,
        "wires": [
            [
                "6204b2d9168ab579"
            ]
        ]
    },
    {
        "id": "6204b2d9168ab579",
        "type": "function",
        "z": "b2ef1f643d602e3e",
        "name": "to JSON",
        "func": "(function(global, undefined) { \"use strict\";\nvar POW_2_24 = 5.960464477539063e-8,\n    POW_2_32 = 4294967296,\n    POW_2_53 = 9007199254740992;\n\nfunction encode(value) {\n  var data = new ArrayBuffer(data);\n  var dataView = new DataView(data);\n  var lastLength;\n  var offset = 0;\n\n  function prepareWrite(length) {\n    var newByteLength = data.byteLength;\n    var requiredLength = offset + length;\n    while (newByteLength < requiredLength)\n      newByteLength <<= 1;\n    if (newByteLength !== data.byteLength) {\n      var oldDataView = dataView;\n      data = new ArrayBuffer(newByteLength);\n      dataView = new DataView(data);\n      var uint32count = (offset + 3) >> 2;\n      for (var i = 0; i < uint32count; ++i)\n        dataView.setUint32(i << 2, oldDataView.getUint32(i << 2));\n    }\n\n    lastLength = length;\n    return dataView;\n  }\n  function commitWrite() {\n    offset += lastLength;\n  }\n  function writeFloat64(value) {\n    commitWrite(prepareWrite(8).setFloat64(offset, value));\n  }\n  function writeUint8(value) {\n    commitWrite(prepareWrite(1).setUint8(offset, value));\n  }\n  function writeUint8Array(value) {\n    var dataView = prepareWrite(value.length);\n    for (var i = 0; i < value.length; ++i)\n      dataView.setUint8(offset + i, value[i]);\n    commitWrite();\n  }\n  function writeUint16(value) {\n    commitWrite(prepareWrite(2).setUint16(offset, value));\n  }\n  function writeUint32(value) {\n    commitWrite(prepareWrite(4).setUint32(offset, value));\n  }\n  function writeUint64(value) {\n    var low = value % POW_2_32;\n    var high = (value - low) / POW_2_32;\n    var dataView = prepareWrite(8);\n    dataView.setUint32(offset, high);\n    dataView.setUint32(offset + 4, low);\n    commitWrite();\n  }\n  function writeTypeAndLength(type, length) {\n    if (length < 24) {\n      writeUint8(type << 5 | length);\n    } else if (length < 0x100) {\n      writeUint8(type << 5 | 24);\n      writeUint8(length);\n    } else if (length < 0x10000) {\n      writeUint8(type << 5 | 25);\n      writeUint16(length);\n    } else if (length < 0x100000000) {\n      writeUint8(type << 5 | 26);\n      writeUint32(length);\n    } else {\n      writeUint8(type << 5 | 27);\n      writeUint64(length);\n    }\n  }\n\n  function encodeItem(value) {\n    var i;\n\n    if (value === false)\n      return writeUint8(0xf4);\n    if (value === true)\n      return writeUint8(0xf5);\n    if (value === null)\n      return writeUint8(0xf6);\n    if (value === undefined)\n      return writeUint8(0xf7);\n\n    switch (typeof value) {\n      case \"number\":\n        if (Math.floor(value) === value) {\n          if (0 <= value && value <= POW_2_53)\n            return writeTypeAndLength(0, value);\n          if (-POW_2_53 <= value && value < 0)\n            return writeTypeAndLength(1, -(value + 1));\n        }\n        writeUint8(0xfb);\n        return writeFloat64(value);\n\n      case \"string\":\n        var utf8data = [];\n        for (i = 0; i < value.length; ++i) {\n          var charCode = value.charCodeAt(i);\n          if (charCode < 0x80) {\n            utf8data.push(charCode);\n          } else if (charCode < 0x800) {\n            utf8data.push(0xc0 | charCode >> 6);\n            utf8data.push(0x80 | charCode & 0x3f);\n          } else if (charCode < 0xd800) {\n            utf8data.push(0xe0 | charCode >> 12);\n            utf8data.push(0x80 | (charCode >> 6)  & 0x3f);\n            utf8data.push(0x80 | charCode & 0x3f);\n          } else {\n            charCode = (charCode & 0x3ff) << 10;\n            charCode |= value.charCodeAt(++i) & 0x3ff;\n            charCode += 0x10000;\n\n            utf8data.push(0xf0 | charCode >> 18);\n            utf8data.push(0x80 | (charCode >> 12)  & 0x3f);\n            utf8data.push(0x80 | (charCode >> 6)  & 0x3f);\n            utf8data.push(0x80 | charCode & 0x3f);\n          }\n        }\n\n        writeTypeAndLength(3, utf8data.length);\n        return writeUint8Array(utf8data);\n\n      default:\n        var length;\n        if (Array.isArray(value)) {\n          length = value.length;\n          writeTypeAndLength(4, length);\n          for (i = 0; i < length; ++i)\n            encodeItem(value[i]);\n        } else if (value instanceof Uint8Array) {\n          writeTypeAndLength(2, value.length);\n          writeUint8Array(value);\n        } else {\n          var keys = Object.keys(value);\n          length = keys.length;\n          writeTypeAndLength(5, length);\n          for (i = 0; i < length; ++i) {\n            var key = keys[i];\n            encodeItem(key);\n            encodeItem(value[key]);\n          }\n        }\n    }\n  }\n\n  encodeItem(value);\n\n  if (\"slice\" in data)\n    return data.slice(0, offset);\n\n  var ret = new ArrayBuffer(offset);\n  var retView = new DataView(ret);\n  for (var i = 0; i < offset; ++i)\n    retView.setUint8(i, dataView.getUint8(i));\n  return ret;\n}\n\nfunction decode(data, tagger, simpleValue) {\n  var dataView = new DataView(data);\n  var offset = 0;\n\n  if (typeof tagger !== \"function\")\n    tagger = function(value) { return value; };\n  if (typeof simpleValue !== \"function\")\n    simpleValue = function() { return undefined; };\n\n  function commitRead(length, value) {\n    offset += length;\n    return value;\n  }\n  function readArrayBuffer(length) {\n    return commitRead(length, new Uint8Array(data, offset, length));\n  }\n  function readFloat16() {\n    var tempArrayBuffer = new ArrayBuffer(4);\n    var tempDataView = new DataView(tempArrayBuffer);\n    var value = readUint16();\n\n    var sign = value & 0x8000;\n    var exponent = value & 0x7c00;\n    var fraction = value & 0x03ff;\n\n    if (exponent === 0x7c00)\n      exponent = 0xff << 10;\n    else if (exponent !== 0)\n      exponent += (127 - 15) << 10;\n    else if (fraction !== 0)\n      return (sign ? -1 : 1) * fraction * POW_2_24;\n\n    tempDataView.setUint32(0, sign << 16 | exponent << 13 | fraction << 13);\n    return tempDataView.getFloat32(0);\n  }\n  function readFloat32() {\n    return commitRead(4, dataView.getFloat32(offset));\n  }\n  function readFloat64() {\n    return commitRead(8, dataView.getFloat64(offset));\n  }\n  function readUint8() {\n    return commitRead(1, dataView.getUint8(offset));\n  }\n  function readUint16() {\n    return commitRead(2, dataView.getUint16(offset));\n  }\n  function readUint32() {\n    return commitRead(4, dataView.getUint32(offset));\n  }\n  function readUint64() {\n    return readUint32() * POW_2_32 + readUint32();\n  }\n  function readBreak() {\n    if (dataView.getUint8(offset) !== 0xff)\n      return false;\n    offset += 1;\n    return true;\n  }\n  function readLength(additionalInformation) {\n    if (additionalInformation < 24)\n      return additionalInformation;\n    if (additionalInformation === 24)\n      return readUint8();\n    if (additionalInformation === 25)\n      return readUint16();\n    if (additionalInformation === 26)\n      return readUint32();\n    if (additionalInformation === 27)\n      return readUint64();\n    if (additionalInformation === 31)\n      return -1;\n    throw \"Invalid length encoding\";\n  }\n  function readIndefiniteStringLength(majorType) {\n    var initialByte = readUint8();\n    if (initialByte === 0xff)\n      return -1;\n    var length = readLength(initialByte & 0x1f);\n    if (length < 0 || (initialByte >> 5) !== majorType)\n      throw \"Invalid indefinite length element\";\n    return length;\n  }\n\n  function appendUtf16Data(utf16data, length) {\n    for (var i = 0; i < length; ++i) {\n      var value = readUint8();\n      if (value & 0x80) {\n        if (value < 0xe0) {\n          value = (value & 0x1f) <<  6\n                | (readUint8() & 0x3f);\n          length -= 1;\n        } else if (value < 0xf0) {\n          value = (value & 0x0f) << 12\n                | (readUint8() & 0x3f) << 6\n                | (readUint8() & 0x3f);\n          length -= 2;\n        } else {\n          value = (value & 0x0f) << 18\n                | (readUint8() & 0x3f) << 12\n                | (readUint8() & 0x3f) << 6\n                | (readUint8() & 0x3f);\n          length -= 3;\n        }\n      }\n\n      if (value < 0x10000) {\n        utf16data.push(value);\n      } else {\n        value -= 0x10000;\n        utf16data.push(0xd800 | (value >> 10));\n        utf16data.push(0xdc00 | (value & 0x3ff));\n      }\n    }\n  }\n\n  function decodeItem() {\n    var initialByte = readUint8();\n    var majorType = initialByte >> 5;\n    var additionalInformation = initialByte & 0x1f;\n    var i;\n    var length;\n\n    if (majorType === 7) {\n      switch (additionalInformation) {\n        case 25:\n          return readFloat16();\n        case 26:\n          return readFloat32();\n        case 27:\n          return readFloat64();\n      }\n    }\n\n    length = readLength(additionalInformation);\n    if (length < 0 && (majorType < 2 || 6 < majorType))\n      throw \"Invalid length\";\n\n    switch (majorType) {\n      case 0:\n        return length;\n      case 1:\n        return -1 - length;\n      case 2:\n        if (length < 0) {\n          var elements = [];\n          var fullArrayLength = 0;\n          while ((length = readIndefiniteStringLength(majorType)) >= 0) {\n            fullArrayLength += length;\n            elements.push(readArrayBuffer(length));\n          }\n          var fullArray = new Uint8Array(fullArrayLength);\n          var fullArrayOffset = 0;\n          for (i = 0; i < elements.length; ++i) {\n            fullArray.set(elements[i], fullArrayOffset);\n            fullArrayOffset += elements[i].length;\n          }\n          return fullArray;\n        }\n        return readArrayBuffer(length);\n      case 3:\n        var utf16data = [];\n        if (length < 0) {\n          while ((length = readIndefiniteStringLength(majorType)) >= 0)\n            appendUtf16Data(utf16data, length);\n        } else\n          appendUtf16Data(utf16data, length);\n        return String.fromCharCode.apply(null, utf16data);\n      case 4:\n        var retArray;\n        if (length < 0) {\n          retArray = [];\n          while (!readBreak())\n            retArray.push(decodeItem());\n        } else {\n          retArray = new Array(length);\n          for (i = 0; i < length; ++i)\n            retArray[i] = decodeItem();\n        }\n        return retArray;\n      case 5:\n        var retObject = {};\n        for (i = 0; i < length || length < 0 && !readBreak(); ++i) {\n          var key = decodeItem();\n          retObject[key] = decodeItem();\n        }\n        return retObject;\n      case 6:\n        return tagger(decodeItem(), length);\n      case 7:\n        switch (length) {\n          case 20:\n            return false;\n          case 21:\n            return true;\n          case 22:\n            return null;\n          case 23:\n            return undefined;\n          default:\n            return simpleValue(length);\n        }\n    }\n  }\n\n  var ret = decodeItem();\n  /*if (offset !== data.byteLength)\n    throw \"Remaining bytes\";*/\n  return ret;\n}\n\nvar obj = { encode: encode, decode: decode };\n\nif (typeof define === \"function\" && define.amd)\n  define(\"cbor/cbor\", obj);\nelse if (typeof module !== \"undefined\" && module.exports)\n  module.exports = obj;\nelse if (!global.CBOR)\n  global.CBOR = obj;\n\n})(this);\n\n//\nmsg.payload=CBOR.decode(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 460,
        "wires": [
            [
                "bf5ec004cdbac808",
                "e5724c46090d5672"
            ]
        ]
    },
    {
        "id": "2d6fdb3233043ff9",
        "type": "function",
        "z": "b2ef1f643d602e3e",
        "name": "CSV CO2",
        "func": "var id = msg.payload[0].ESP_ID;\nvar co2_ppm = msg.payload[0].CO2;\nmsg.payload.Time = new Date()\nvar ref = msg.payload.Time.toString();\nconst ref_split = ref.split(\" \");\nvar date = ref_split[1];\ndate = date.concat(\"-\", ref_split[2], \"-\", ref_split[3]);\nvar time = ref_split[4];\n\nmsg.payload = id + \",\" + co2_ppm + \",\" + date + \",\" + time;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 400,
        "wires": [
            [
                "284d95fdfb7816d8"
            ]
        ]
    },
    {
        "id": "284d95fdfb7816d8",
        "type": "file",
        "z": "b2ef1f643d602e3e",
        "name": "esp-co2.csv",
        "filename": "/home/oscar/esp/esp-idf/IoT-CO2System/node-red/esp-co2.csv",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 890,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "b7e35f28afe327a9",
        "type": "function",
        "z": "b2ef1f643d602e3e",
        "name": "CSV BLE",
        "func": "var id = msg.payload[0].ESP_ID;\nvar ble = msg.payload[0].BLE_people;\nmsg.payload.Time = new Date()\nvar ref = msg.payload.Time.toString();\nconst ref_split = ref.split(\" \");\nvar date = ref_split[1];\ndate = date.concat(\"-\", ref_split[2], \"-\", ref_split[3]);\nvar time = ref_split[4];\n\nmsg.payload = id + \",\" + ble + \",\" + date + \",\" + time;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 520,
        "wires": [
            [
                "97b4ea0fa4371923"
            ]
        ]
    },
    {
        "id": "97b4ea0fa4371923",
        "type": "file",
        "z": "b2ef1f643d602e3e",
        "name": "esp-ble.csv",
        "filename": "/home/oscar/esp/esp-idf/IoT-CO2System/node-red/esp-ble.csv",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 890,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "e5724c46090d5672",
        "type": "switch",
        "z": "b2ef1f643d602e3e",
        "name": "Data BLE",
        "property": "payload[0].BLE_people",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 560,
        "y": 520,
        "wires": [
            [
                "b7e35f28afe327a9",
                "cca156061f2991cf"
            ]
        ]
    },
    {
        "id": "bf5ec004cdbac808",
        "type": "switch",
        "z": "b2ef1f643d602e3e",
        "name": "Data CO2",
        "property": "payload[0].CO2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 560,
        "y": 400,
        "wires": [
            [
                "2d6fdb3233043ff9",
                "a5ea997941ee941e"
            ]
        ]
    },
    {
        "id": "822b53f13b188f0e",
        "type": "ui_gauge",
        "z": "b2ef1f643d602e3e",
        "name": "Co2 Values",
        "group": "e7c4cbc4ab1359cc",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Co2 detector",
        "label": "Co2_ppm",
        "format": "{{value}}",
        "min": "400",
        "max": "1000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "700",
        "seg2": "850",
        "className": "",
        "x": 911.111083984375,
        "y": 327.77777099609375,
        "wires": []
    },
    {
        "id": "a5ea997941ee941e",
        "type": "function",
        "z": "b2ef1f643d602e3e",
        "name": "CO2 Value",
        "func": "msg.payload = msg.payload[0].CO2;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 731.111083984375,
        "y": 327.77777099609375,
        "wires": [
            [
                "822b53f13b188f0e",
                "a2891fe5ab56471f"
            ]
        ]
    },
    {
        "id": "a2891fe5ab56471f",
        "type": "ui_chart",
        "z": "b2ef1f643d602e3e",
        "name": "CO2 Graph",
        "group": "e7c4cbc4ab1359cc",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Co2 values graph",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "350",
        "ymax": "1500",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 911.111083984375,
        "y": 267.77777099609375,
        "wires": [
            []
        ]
    },
    {
        "id": "cca156061f2991cf",
        "type": "function",
        "z": "b2ef1f643d602e3e",
        "name": "BLE Value",
        "func": "msg.payload = msg.payload[0].BLE_people;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 728.8888549804688,
        "y": 591.111083984375,
        "wires": [
            [
                "06e3f004344cc4d8",
                "478d8f89cee3d2e4"
            ]
        ]
    },
    {
        "id": "06e3f004344cc4d8",
        "type": "ui_chart",
        "z": "b2ef1f643d602e3e",
        "name": "Graph BLE",
        "group": "97dbd6937c9ef01c",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Number of BLE devices",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "40",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 908.8888549804688,
        "y": 651.111083984375,
        "wires": [
            []
        ]
    },
    {
        "id": "478d8f89cee3d2e4",
        "type": "ui_text",
        "z": "b2ef1f643d602e3e",
        "group": "97dbd6937c9ef01c",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "BLE device counter",
        "label": "BLE devices:",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 928.8888549804688,
        "y": 591.111083984375,
        "wires": []
    }
]